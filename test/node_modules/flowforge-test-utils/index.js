const PACKAGE_ROOT = "../../../"
const path = require("path");
const FFRequire = file => require(path.join(PACKAGE_ROOT,file))
const { LocalTransport } = require('./forge/postoffice/localTransport.js')
const Forge = FFRequire('forge/forge.js')

async function setupApp (config = {}) {
    process.env.FF_TELEMETRY_DISABLED = true
    config = {
        telemetry: { enabled: false },
        logging: {
            level: 'warn'
        },
        db: {
            type: 'sqlite',
            storage: ':memory:'
        },
        email: {
            enabled: true,
            transport: new LocalTransport()
        },
        driver: {
            type: 'stub'
        },
        broker: {
            url: ':test:'
        },
        ...config
    }

    if (process.env.FF_TEST_DB_POSTGRES) {
        config.db.type = 'postgres'
        config.db.host = process.env.FF_TEST_DB_POSTGRES_HOST || 'localhost'
        config.db.port = process.env.FF_TEST_DB_POSTGRES_PORT || 5432
        config.db.user = process.env.FF_TEST_DB_POSTGRES_USER || 'postgres'
        config.db.password = process.env.FF_TEST_DB_POSTGRES_PASSWORD || 'secret'
        config.db.database = process.env.FF_TEST_DB_POSTGRES_DATABASE || 'flowforge_test'

        try {
            const { Client } = require('pg')
            const client = new Client({
                host: config.db.host,
                port: config.db.port,
                user: config.db.user,
                password: config.db.password
            })
            await client.connect()
            try {
                await client.query(`DROP DATABASE IF EXISTS ${config.db.database}`)
            } catch (err) {
                // Don't mind if it doesn't exist
            }
            await client.query(`CREATE DATABASE ${config.db.database}`)
            await client.end()
        } catch (err) {
            console.log(err.toString())
            process.exit(1)
        }
    }

    return await Forge({ config })
}


module.exports = {
    require: FFRequire,
    resolve: file => path.resolve(path.join(__dirname,PACKAGE_ROOT,file)),
    setupApp
}
